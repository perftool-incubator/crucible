#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

if [ -e /etc/sysconfig/crucible ]; then
    . /etc/sysconfig/crucible
    if [ -z "$CRUCIBLE_HOME" ]; then
        echo "\$CRUCIBLE_HOME does not appear to be defined in /etc/sysconfig/crucible, exiting"
        exit 1
    fi
else
    echo "Could not find /etc/sysconfig/crucible.  Please ensure crucible is installed first."
    exit 1
fi

if [ -z "$CRUCIBLE_HOME" ]; then
    echo "CRUCIBLE_HOME not set, exiting."
    exit 1
fi

if [ ! -e $CRUCIBLE_HOME ]; then
    echo "Could not find $CRUCIBLE_HOME, exiting."
    exit 1
fi
export CRUCIBLE_HOME
CRUCIBLE_NEW_SESSION_ID="yes"
CRUCIBLE_CFG_JSON_VALIDATION="yes"
. $CRUCIBLE_HOME/bin/base

# must run as root
root_or_die

if [ -z "${CRUCIBLE_CONTROLLER_IMAGE}" ]; then
    echo "Exiting because CRUCIBLE_CONTROLLER_IMAGE is not defined"
    exit 1
fi

podman --version >/dev/null
if [ $? -gt 0 ]; then
    echo "You must have podman to use the crucible controller with containers.  Please install and run again"
    exit 1
fi

# make sure the JSON config files validate against their schemas before proceeding
validate_json_schema ${SERVICES_CFG} ${SERVICES_CFG_SCHEMA} || exit_error "Services Configuration Error: ${SERVICES_CFG} does not validate against ${SERVICES_CFG_SCHEMA}"
validate_json_schema ${REGISTRIES_CFG} ${REGISTRIES_CFG_SCHEMA} || exit_error "Registries Configuration Error: ${REGISTRIES_CFG} does not validate against ${REGISTRIES_CFG_SCHEMA}"

check_id

function setup_pipe() {
    local PIPE=${1}
    rm ${PIPE}
    mknod ${PIPE} p
}

if [ "${1}" != "update" ]; then
    ${CRUCIBLE_HOME}/bin/_git-fetch &
    disown $!

    if [ -e "${UPDATE_STATUS_FILE}" ]; then
        {
            flock --timeout 2 --shared 9 || exit_error "Failed to shared acquire ${UPDATE_STATUS_LOCK_FILE}"

            read OTHER UPDATE_COUNT < "${UPDATE_STATUS_FILE}"
        } 9<"${UPDATE_STATUS_LOCK_FILE}"

        if [ "${UPDATE_COUNT}" != "0" ]; then
            echo "*** NOTICE: Crucible is at least ${UPDATE_COUNT} commits behind.  See 'crucible repo info' for details. ***"
            echo
        fi
    fi
fi

${CRUCIBLE_HOME}/bin/_ssh-key-cleaner &
disown $!

# special case some log operations so they don't happen under log
# redirection
log_cmd="${CRUCIBLE_HOME}/bin/_logger console \"${COMMAND}\" ${LOG_DB} ${STDOUT_PIPE} ${STDERR_PIPE}"

if [ ! -e ${LOG_DB} -a "$CRUCIBLE_USE_LOGGER" == "1" ]; then
    crucible_log init ${LOG_DB}
fi

if [ "$1" == "log" ]; then
    if [ "$CRUCIBLE_USE_LOGGER" == "1" ]; then
        if [ "$2" == "view" -o -z "$2" ]; then
            shift
            shift
            crucible_log view ${LOG_DB} "$@" | less -S -F
            exit $?
        elif [ "$2" == "clear" ]; then
            crucible_log clear ${LOG_DB}
            exit $?
        elif [ "$2" == "init" ]; then
            crucible_log init ${LOG_DB}
            exit $?
	elif [ "$2" == "getsessionids" ]; then
	    crucible_log getsessionids ${LOG_DB}
	    exit $?
        elif [ "$2" == "debug" ]; then
                sqlite3 ${LOG_DB} ".headers on" \
                        ".echo on" \
                        "select * from db_state;" ".print" \
                        "select * from streams;" ".print" \
                        "select * from sources;" ".print" \
                        "select * from commands;" ".print" \
                        "select * from sessions;" ".print" \
                        "select * from lines;" \
                    | less -S -F
                exit $?
        fi
    else
        echo "log command not supported because CRUCIBLE_USE_LOGGER = 0"
        exit
    fi
elif [ "$1" == "help" -o -z "$1" ]; then
    # print all help output outside of the logger context to avoid
    # filling the log with generic help information

    shift
    exec ${CRUCIBLE_HOME}/bin/_help ${CRUCIBLE_HOME} "$@"
elif [ "$1" == "console" ]; then
    exec ${podman_run_interactive} --name crucible-console-${SESSION_ID} --tty --interactive "${container_common_args[@]}" "${container_rs_args[@]}" "${container_build_args[@]}" "${container_non_service_args[@]}" ${CRUCIBLE_CONTROLLER_IMAGE} /bin/bash
elif [ "${1}" == "reset" ]; then
    # this input has to be done outside of the logger redirect scope

    confirm_continue confirm "reset Crucible"
    if [ "${confirm}" != "YES" ]; then
        echo "Canceling reset"
        exit
    else
        echo "Clearing Crucible log"
        if ! crucible_log clear ${LOG_DB}; then
            exit $?
        fi
    fi
elif [ "${1}" == "run-ci" ]; then
    confirm_continue confirm "run crucible-ci stage 1"
    if [ "${confirm}" == "YES" ]; then
	ci_cmd="${CRUCIBLE_HOME}/subprojects/core/crucible-ci/.github/actions/integration-tests/run-ci-stage1 --disable-update-test $@"
	echo
	echo
	echo "Execing ${ci_cmd}"
	echo
	exec ${ci_cmd}
    else
	echo "Canceling run-ci"
	exit
    fi
fi

if [ "$CRUCIBLE_USE_LOGGER" == "1" ]; then
    # disable CTRL-C killing this script while we are logging to a remote
    # process the CTRL-C should kill any subprocess other than the logger
    # and we should gracefully exit
    trap "echo 'Crucible caught CTRL-C'" INT

    # initialize the logger pipes
    STDOUT_PIPE=$(mktemp)
    STDERR_PIPE=$(mktemp)
    setup_pipe ${STDOUT_PIPE}
    setup_pipe ${STDERR_PIPE}

    COMMAND="$(basename $0) $@"
    COMMAND="`echo $COMMAND | sed -e 's/ /___/g'`"
    logger_cmd="${CRUCIBLE_HOME}/bin/_logger console \"${SESSION_ID}\" \"${COMMAND}\" ${LOG_DB} ${STDOUT_PIPE} ${STDERR_PIPE}"

    logger_container_name="crucible-logger-${SESSION_ID}"

    container_logger_args=()
    container_logger_args+=("-i")
    container_logger_args+=("--name ${logger_container_name}")
    container_logger_args+=("--mount=type=bind,source=${USER_STORE},destination=${USER_STORE}")
    container_logger_args+=("--mount=type=bind,source=/tmp,destination=/tmp")

    ${podman_run} ${container_logger_args[@]} ${container_common_args[@]} ${container_non_service_args[@]} ${CRUCIBLE_CONTROLLER_IMAGE} ${logger_cmd} &
    LOGGER_PID=$!

    # redirect the output to the pipes
    # backup the existing file handles, just in case they need to be restored
    STDOUT_BACKUP=$(readlink -f /proc/$$/fd/1)
    STDERR_BACKUP=$(readlink -f /proc/$$/fd/2)
    exec > ${STDOUT_PIPE} 2> ${STDERR_PIPE}
fi

# invoke the main command handler
${CRUCIBLE_HOME}/bin/_main "${LOG_DB}" "$@"
RET_VAL=${?}

if [ "$CRUCIBLE_USE_LOGGER" == "1" ]; then
    # ensure that the container where _logger is running is still active
    # if it is not, these echo commands would block indefinitely
    if podman container exists ${logger_container_name}; then
	# signal the logger that all output has been processed from each of
	# the pipes
	echo "STDOUT->CRUCIBLE_CLOSE_LOG_PIPE" > ${STDOUT_PIPE}
	echo "STDERR->CRUCIBLE_CLOSE_LOG_PIPE" > ${STDERR_PIPE}

	# wait for the logger to exit
	wait ${LOGGER_PID}
    else
	# restore STDOUT/STDERR file handles since _logger is gone
	exec 1>${STDOUT_BACKUP} 2>${STDERR_BACKUP}

	echo "WARNING: The _logger container exited prematurely!"
    fi
fi

exit ${RET_VAL}
