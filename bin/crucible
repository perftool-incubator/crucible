#!/usr/bin/env bash
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-

# Crucible's purpose is to provide a single interface
# for all of these subprojects for a seamless performance
# benchmark and tool automation solution
#
# Crucible expects to have these subprojects:
#
# Project-name      User-Commands   Purpose                   Status
#
# Rickshaw          run             Coordinate a full "run"   Implemented with
#                                   of a benchmark with one   localhost, remotehost,
#                                   or more iterations        and k8s endpoints
#
# Multiplex         <TBD>           Convert a user's list     Currently only
#                                   of benchamrk params       supported via
#                                   (--opt val1,val2)         --mv-params with
#                                   into multiple benchmark   run command (and
#                                   iterations                requires mv-params
#                                                             JSON format
#
# Roadblock         none            Provide synchrnization    Fully integrated
#                                   and message passing
#                                   across all participants
#                                   in benchmark execution
#
# Workshop          none            Dynamic, multi-distro     Fully integrated
#                                   container builder for
#                                   all SW needed for bench-
#                                   marks and tools.
#
# Tools-            none            Helper scripts for tool   Framework intregated,
# subprojects                       execution and post-       per-tool status with
#                                   processing                post-processed metrics
#                                                             supported below:
#
#                                                             mpstat: cpu util
#                                                             sar: netdev tput
#                                                             iostat:
#                                                             pidstat:
#                                                             perf:
#
# Benchmarks-                      Helper scripts for         Framework intregated,
# subprojects       none           benchmark execution        per-benchmark status
#                                  and post-processing        below:
#
#                                                             uperf: fully integrated
#                                                             fio: fully integrated
#
# CommonDataModel   <TBD>          Data storage, query        Elastic instance
#                                                             automatically created
#                                                             and indices created.
#                                                             Run result-summarization
#                                                             functional.
#
# Crucible is meant to be run from a single command, 'crucible'
# and provide all the functionality from these subprojects.
#
# The system where 'crucible' is run is the 'crucible-controller'.
# It is not necessary to install crucible on any system-under-test
# (host, cluster, cloud, etc).  The crucible-controller is where
# a user initiates benchmark runs, to be executed on remote
# systems-under-test, including remote-hosts and k8s clusters (more
# to follow).  These systems-under-test are called endpoints, and a
# benchmark run can include multiple endpoints, even with different
# endpoint types (for example uperf clients on remote-hosts and uperf
# servers in mulitple k8s clusters).
#
# The crucible controller only requires two software packages:
# - podman
# - git
# 
# Crucible also requires that a container registry with
# push and pull capabilities, to be used for dynamic image
# building for benchmarks and tools.  The following must be
# set in /etc/crucible.conf
# CRUCIBLE_CLIENT_SERVER_REPO
# CRUCIBLE_CLIENT_SERVER_AUTH
#
# YOU MUST CREATE AN ACCOUNT ON A CONTAINER REGISTRY
# If you are working among a team, you can use the same account.
#
# Finally, crucible-controller will use publicly available
# container image to execute all subprojects.  This container is
# defined in /etc/crucible.conf with:
# CRUCIBLE_CONTAINER_IMAGE
# All of code for subprojects are contained on the controller, under
# $CRUCIBLE_HOME/subprojects, but the crucbile-controller container image
# provides all software dependencies to run that code.
#
# AS A CRUCBILE USER, YOU SHOULD NEVER HAVE TO INSTALL ANY SOFTWARE
# OTHER THAN PODMAN AND GIT.


if [ -e /etc/crucible.conf ]; then
    . /etc/crucible.conf
    if [ -z "$CRUCIBLE_HOME" ]; then
        echo "\$CRUCIBLE_HOME does not appear to be defined in /etc/crucible.conf, exiting"
        exit 1
    fi
else
    echo "Could not find /etc/crucible.conf.  Please ensure crucible is installed first."
    exit 1
fi

if [ -z "$CRUCIBLE_HOME" ]; then
    echo "CRUCIBLE_HOME not set, exiting."
    exit 1
fi

if [ ! -e $CRUCIBLE_HOME ]; then
    echo "Could not find $CRUCIBLE_HOME, exiting."
    exit 1
fi
export CRUCIBLE_HOME
export TOOLBOX_HOME=${CRUCIBLE_HOME}/subprojects/core/toolbox
. $CRUCIBLE_HOME/bin/base

if [ -z "$CRUCIBLE_CONTAINER_IMAGE" ]; then
    echo "Exiting because CRUCIBLE_CONTAINER_IMAGE is not defined"
    exit 1
fi

podman --version >/dev/null
if [ $? -gt 0 ]; then
    echo "You must have podman to use the crucible controller with containers.  Please install and run again"
    exit 1
fi

check_id

/bin/mkdir -p $var_crucible

function setup_pipe() {
    local PIPE=${1}
    rm ${PIPE}
    mknod ${PIPE} p
}

# special case some log operations so they don't happen under log
# redirection
log_cmd="${CRUCIBLE_HOME}/bin/_logger console \"${COMMAND}\" ${LOG_DB} ${STDOUT_PIPE} ${STDERR_PIPE}"

if [ ! -e ${LOG_DB} -a "$CRUCIBLE_USE_LOGGER" == "1" ]; then
    crucible_log init ${LOG_DB}
fi

if [ "$1" == "log" ]; then
    if [ "$CRUCIBLE_USE_LOGGER" == "1" ]; then
        if [ "$2" == "view" -o -z "$2" ]; then
            shift
            shift
            crucible_log view ${LOG_DB} "$@" | less -S -F
            exit $?
        elif [ "$2" == "clear" ]; then
            crucible_log clear ${LOG_DB}
            exit $?
        elif [ "$2" == "init" ]; then
            crucible_log init ${LOG_DB}
            exit $?
        elif [ "$2" == "debug" ]; then
                sqlite3 ${LOG_DB} ".headers on" \
                        ".echo on" \
                        "select * from db_state;" ".print" \
                        "select * from streams;" ".print" \
                        "select * from sources;" ".print" \
                        "select * from commands;" ".print" \
                        "select * from sessions;" ".print" \
                        "select * from lines;" \
                    | less -S -F
                exit $?
        fi
    else
        echo "log command not supported because CRUCIBLE_USE_LOGGER = 0"
        exit
    fi
elif [ "$1" == "help" ]; then
    # print all help output outside of the logger context to avoid
    # filling the log with generic help information

    shift
    exec ${CRUCIBLE_HOME}/bin/_help ${CRUCIBLE_HOME} "$@"
elif [ "$1" == "console" ]; then
    exec ${podman_run} --name crucible-console-$(uuidgen) --tty --interactive "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE /bin/bash
fi

LOGGER_SESSION_ID="no-logger"
if [ "$CRUCIBLE_USE_LOGGER" == "1" ]; then
    # disable CTRL-C killing this script while we are logging to a remote
    # process the CTRL-C should kill any subprocess other than the logger
    # and we should gracefully exit
    trap "echo 'Crucible caught CTRL-C'" INT

    # initialize the logger pipes
    STDOUT_PIPE=$(mktemp)
    STDERR_PIPE=$(mktemp)
    setup_pipe ${STDOUT_PIPE}
    setup_pipe ${STDERR_PIPE}

    LOGGER_SESSION_ID=$(uuidgen)

    COMMAND="$(basename $0) $@"
    COMMAND="`echo $COMMAND | sed -e 's/ /___/g'`"
    logger_cmd="${CRUCIBLE_HOME}/bin/_logger console \"${LOGGER_SESSION_ID}\" \"${COMMAND}\" ${LOG_DB} ${STDOUT_PIPE} ${STDERR_PIPE}"

    logger_container_name="crucible-logger-${LOGGER_SESSION_ID}"

    container_logger_args=()
    container_logger_args+=("-i")
    container_logger_args+=("--name ${logger_container_name}")
    container_logger_args+=("--mount=type=bind,source=${USER_STORE},destination=${USER_STORE}")
    container_logger_args+=("--mount=type=bind,source=/tmp,destination=/tmp")

    ${podman_run} ${container_logger_args[@]} ${container_common_args[@]} $CRUCIBLE_CONTAINER_IMAGE $logger_cmd &
    LOGGER_PID=$!

    # redirect the output to the pipes
    # backup the existing file handles, just in case they need to be restored
    STDOUT_BACKUP=$(readlink -f /proc/$$/fd/1)
    STDERR_BACKUP=$(readlink -f /proc/$$/fd/2)
    exec > ${STDOUT_PIPE} 2> ${STDERR_PIPE}
fi

# invoke the main command handler
${CRUCIBLE_HOME}/bin/_main "${LOGGER_SESSION_ID}" "${LOG_DB}" "$@"
RET_VAL=${?}

if [ "$CRUCIBLE_USE_LOGGER" == "1" ]; then
    # ensure that the container where _logger is running is still active
    # if it is not, these echo commands would block indefinitely
    if podman container exists ${logger_container_name}; then
	# signal the logger that all output has been processed from each of
	# the pipes
	echo "STDOUT->CRUCIBLE_CLOSE_LOG_PIPE" > ${STDOUT_PIPE}
	echo "STDERR->CRUCIBLE_CLOSE_LOG_PIPE" > ${STDERR_PIPE}

	# wait for the logger to exit
	wait ${LOGGER_PID}
    else
	# restore STDOUT/STDERR file handles since _logger is gone
	exec 1>${STDOUT_BACKUP} 2>${STDERR_BACKUP}

	echo "WARNING: The _logger container exited prematurely!"
    fi
fi

exit ${RET_VAL}
