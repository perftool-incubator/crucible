#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

EC_FAIL_USER=2

# make sure the user has a .crucible directory for storing things
USER_STORE=$HOME/.crucible
if [ ! -d ${USER_STORE} ]; then
    mkdir -v ${USER_STORE}
fi
LOG_DB=${USER_STORE}/log.db
UPDATE_STATUS_FILE="${USER_STORE}/update-status"

if [ -z "${HOSTFS_DIR}" ]; then
    export CRUCIBLE_HOSTFS_PWD=$(pwd)
fi

if [ -z "${SESSION_ID}" -o "${CRUCIBLE_NEW_SESSION_ID}" == "yes" ]; then
    export SESSION_ID=$(uuidgen)
    CRUCIBLE_NEW_SESSION_ID="no"
fi

container_common_args=()
container_common_args+=("--rm")
container_common_args+=("-e CRUCIBLE_HOME=$CRUCIBLE_HOME")
container_common_args+=("-e TOOLBOX_HOME=${TOOLBOX_HOME}")
container_common_args+=("-e RICKSHAW_HOME=${RICKSHAW_HOME}")
container_common_args+=("-e CRUCIBLE_HOSTFS_PWD=${CRUCIBLE_HOSTFS_PWD}")
container_common_args+=("--mount=type=bind,source=/etc/sysconfig/crucible,destination=/etc/sysconfig/crucible")
container_common_args+=("--mount=type=bind,source=/root,destination=/root")
container_common_args+=("--mount=type=bind,source=${CRUCIBLE_HOME}/config/.bashrc,destination=/root/.bashrc")
container_common_args+=("--mount=type=bind,source=/home,destination=/home")
container_common_args+=("--mount=type=bind,source=/var/lib/crucible,destination=/var/lib/crucible")
container_common_args+=("--mount=type=bind,source=${CRUCIBLE_HOME},destination=${CRUCIBLE_HOME}")
container_common_args+=("--mount=type=bind,source=/,destination=/hostfs")
container_common_args+=("--mount=type=bind,source=/tmp,destination=/tmp")
container_common_args+=("--privileged")
container_common_args+=("--ipc=host")
container_common_args+=("--pid=host")
container_common_args+=("--net=host")
container_common_args+=("--security-opt=label=disable")

container_log_args=()
container_log_args+=("--mount=type=bind,source=${USER_STORE},destination=${USER_STORE}")
container_log_args+=("--mount=type=bind,source=/tmp,destination=/tmp")

container_redis_args=()
container_redis_args+=("-d")
container_redis_args+=("--mount=type=bind,source=$CRUCIBLE_HOME/config/redis.conf,destination=/etc/redis.conf")

container_httpd_args=()
container_httpd_args+=("-d")
container_httpd_args+=("--mount=type=bind,source=$CRUCIBLE_HOME/config/httpd/,destination=/etc/httpd/")

container_es_args=()
container_es_args+=("-d")
#container_es_args+=("--mount=type=bind,source=$CRUCIBLE_HOME/config/elasticsearch/,destination=/etc/elasticsearch/")

container_rs_args=()
container_rs_args+=("-i")
container_rs_args+=("-e RS_REG_REPO=$CRUCIBLE_CLIENT_SERVER_REPO")
container_rs_args+=("-e RS_REG_AUTH=$CRUCIBLE_CLIENT_SERVER_AUTH")
container_rs_args+=("-e RS_REG_TLS_VERIFY=$CRUCIBLE_CLIENT_SERVER_TLS_VERIFY")
container_rs_args+=("-e RS_EMAIL=$CRUCIBLE_EMAIL")
container_rs_args+=("-e RS_NAME=\"$CRUCIBLE_NAME\"")

container_build_args=()
container_build_args+=("--mount=type=bind,source=/var/lib/containers,destination=/var/lib/containers")

var_crucible="/var/lib/crucible"
var_run_crucible="${var_crucible}/run"
var_archive_crucible="${var_crucible}/archive"

function podman_wrapper() {
    local RC

    podman --log-level error "$@" 2>&1 | grep --line-buffered -v "level=warning\|WARNING: The same type, major and minor should not be used for multiple devices."
    RC=${PIPESTATUS[0]}

    return ${RC}
}

podman_pull="podman_wrapper pull"
podman_stop="podman_wrapper stop"
podman_rm="podman_wrapper rm"
podman_run="podman_wrapper run --pull=missing"
podman_run_interactive="podman run --pull=missing"
podman_exists="podman_wrapper container exists"
podman_ps="podman_wrapper ps"

function podman_running() {
    pod=${1}
    if [ -z "${pod}" ]; then
        exit_error "podman_running: no pod name supplied" 3
    fi

    if ${podman_exists} ${pod}; then
        check_output=$(${podman_ps} --filter status=running --filter name=${pod} | grep -v CREATED)

        if [ -n "${check_output}" ]; then
            echo "...appears to be running"
            return 0
        else
            echo "...appears to be present but not running...removing:"
            ${podman_stop} ${pod}
            ${podman_rm} ${pod}
            return 1
        fi
    else
        echo "...not present"
        return 1
    fi
}

function get_timestamp() {
    date -u +%Y-%m-%d_%H:%M:%S_%Z
}

datetime=$(get_timestamp)

function exit_error() {
    echo "ERROR: ${1}"
    shift
    if [ ! -z "$1" ]; then
        exit $1
    else
        exit 1
    fi
}

function check_id {
    if [ -e $HOME/.crucible/identity ]; then
        . $HOME/.crucible/identity
    fi
    export CRUCIBLE_NAME
    export CRUCIBLE_EMAIL
    if [ -z "$CRUCIBLE_NAME" ]; then
        echo "Please consider adding \"CRUCIBLE_NAME=<your full name>\" to $HOME/.crucible/identity"
        sleep 1
    fi
    if [ -z "$CRUCIBLE_EMAIL" ]; then
        echo "Please consider adding \"CRUCIBLE_EMAIL=<your email address>\" to $HOME/.crucible/identity"
        sleep 1
    fi
}

function crucible_log() {
    if [ "$CRUCIBLE_USE_LOGGER" == "1" ]; then
        ${podman_run} --name crucible-log-${SESSION_ID} ${container_log_args[@]} ${container_common_args[@]} $CRUCIBLE_CONTAINER_IMAGE $CRUCIBLE_HOME/bin/log $@
    else
        $CRUCIBLE_HOME/bin/log $@
    fi
}

function root_or_die {
    if [ "`id -u`" != "0" ]; then
        exit_error "You must run this as root, exiting" $EC_FAIL_USER
    fi
}

function send_notification {
    local message="$@"
    local RC

    if [ ! -e ${USER_STORE}/ntfy.yml ]; then
        # notifications via ntfy are not configured
        return 0
    fi

    ${podman_run} --name crucible-send-notification-${SESSION_ID} ${container_common_args[@]} $CRUCIBLE_CONTAINER_IMAGE \
                  ntfy \
                  -c ${USER_STORE}/ntfy.yml \
                  -t "Crucible Notification from $(hostname) at $(get_timestamp)" \
                  send "${message}"
    RC=$?

    if [ ${RC} != 0 ]; then
        echo "ERROR: Failed to send notification"
    fi

    return ${RC}
}

function get_firewall_mgmt_tool() {
    local firewall_tool

    for firewall_tool in firewall-cmd ufw; do
        command -v ${firewall_tool} > /dev/null
        if [ $? -eq 0 ]; then
            echo ${firewall_tool}
            break
        fi
    done
}

function open_firewall_port() {
    local port
    local protocol
    local firewall_mgmt_tool

    port=${1}; shift
    protocol=${1}; shift

    firewall_mgmt_tool=$(get_firewall_mgmt_tool)

    case "${firewall_mgmt_tool}" in
        "firewall-cmd")
            local default_firewall_zone

            if firewall-cmd --state --quiet; then
                # firewalld is running...
                default_firewall_zone=$(firewall-cmd --get-default-zone)
                firewall-cmd --zone=${default_firewall_zone} --add-port=${port}/${protocol} --quiet
            fi
            ;;
        "ufw")
            if [ "$(ufw status | grep Status | awk '{ print $2 }')" == "active" ]; then
                ufw allow ${port}/${protocol} > /dev/null
            fi
            ;;
        *)
            if [ -z "${firewall_mgmt_tool}" ]; then
                echo "Could not determine how to manage the firewall.  Please ensure ${port}/${protocol} is open on this host."
            else
                echo "Unknown firewall management tool '${firewall_mgmt_tool}' encountered.  Please ensure ${port}/${protocol} is open on this host."
            fi
            ;;
    esac
}

function close_firewall_port() {
    local port
    local protocol
    local firewall_mgmt_tool

    port=${1}; shift
    protocol=${1}; shift

    firewall_mgmt_tool=$(get_firewall_mgmt_tool)

    case "${firewall_mgmt_tool}" in
        "firewall-cmd")
            local default_firewall_zone

            if firewall-cmd --state --quiet; then
                # firewalld is running...
                default_firewall_zone=$(firewall-cmd --get-default-zone)
                firewall-cmd --zone=${default_firewall_zone} --remove-port=${port}/${protocol} --quiet
            fi
            ;;
        "ufw")
            if [ "$(ufw status | grep Status | awk '{ print $2 }')" == "active" ]; then
                ufw delete allow ${port}/${protocol} > /dev/null
            fi
            ;;
        *)
            if [ -z "${firewall_mgmt_tool}" ]; then
                echo "Could not determine how to manage the firewall.  Please ensure ${port}/${protocol} is closed on this host."
            else
                echo "Unknown firewall management tool '${firewall_mgmt_tool}' encountered.  Please ensure ${port}/${protocol} is closed on this host."
            fi
            ;;
    esac
}

function start_httpd() {
    local RC httpd_cmd
    httpd_cmd="/usr/sbin/httpd -DFOREGROUND"
    echo -n "Checking for httpd"
    if ! podman_running crucible-httpd; then
        open_firewall_port 8080 tcp
        $podman_run --name crucible-httpd "${container_common_args[@]}" "${container_httpd_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $httpd_cmd > /dev/null
        RC=$?
        if [ ${RC} != 0 ]; then
            echo "ERROR: Could not start httpd"
        else
            echo "Successfully started httpd"
        fi
    fi
    return ${RC}
}

function stop_httpd() {
    local RC=0
    echo -n "Checking for httpd"
    if podman_running crucible-httpd; then
        close_firewall_port 8080 tcp
        ${podman_stop} crucible-httpd > /dev/null
        RC=$?
        if [ ${RC} != 0 ]; then
            echo "ERROR: Could not stop httpd"
        else
            echo "Successfully stopped httpd"
        fi
    fi
    return ${RC}
}

function start_redis() {
    local RC redis_cmd
    redis_cmd="redis-server /etc/redis.conf"
    echo -n "Checking for redis"
    if ! podman_running crucible-redis; then
        open_firewall_port 6379 tcp
        $podman_run --name crucible-redis "${container_common_args[@]}" "${container_redis_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $redis_cmd > /dev/null
        RC=$?
        if [ ${RC} != 0 ]; then
            echo "ERROR: Could not start redis"
        else
            echo "Successfully started redis"
        fi
    fi
    return ${RC}
}

function stop_redis() {
    local RC=0
    echo -n "Checking for redis"
    if podman_running crucible-redis; then
        close_firewall_port 6379 tcp
        ${podman_stop} crucible-redis > /dev/null
        RC=$?
        if [ ${RC} != 0 ]; then
            echo "ERROR: Could not stop redis"
        else
            echo "Successfully stopped redis"
        fi
    fi
    return ${RC}
}

function start_es() {
    local es_available count status_check es_timeout pod_name
    local es_start_cmd es_status_cmd common_container_args
    local RC stage
    es_start_cmd="${CRUCIBLE_HOME}/config/start-es.sh $var_crucible/es"
    es_status_cmd="curl --silent --show-error --stderr - -X GET localhost:9200/_cluster/health"
    echo -n "Checking for elasticsearch"
    if ! podman_running crucible-es; then
        open_firewall_port 9200 tcp
        open_firewall_port 9300 tcp
        mkdir -p "$var_crucible/es"
        common_container_args=()
        for arg in "${container_common_args[@]}"; do
            # remove the hostfs mount from the ES container due to cgroup issues with ES/java
            if ! echo "${arg}" | grep -q "hostfs"; then
                common_container_args+=("${arg}")
            fi
        done
        $podman_run --name crucible-es "${common_container_args[@]}" "${container_es_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $es_start_cmd > /dev/null
        RC=$?
        if [ ${RC} != 0 ]; then
            echo "ERROR: Could not start elasticsearch"
        else
            es_available=0
            count=1
            es_timeout=60
            echo "Waiting for elasticsearch to be available (${es_timeout} seconds maximum)..."
            stage=1
            while [ ${es_available} != 1 -a ${count} -lt ${es_timeout} ]; do
                case "${stage}" in
                    1)
                        pod_name=crucible-es-status-check-${SESSION_ID}-$(uuidgen)
                        status_check=$(${podman_run} --name ${pod_name} "${container_common_args[@]}" ${CRUCIBLE_CONTAINER_IMAGE} ${es_status_cmd})
                        if echo "${status_check}" | grep -q "Connection refused"; then
                            sleep 1
                        else
                            stage=2
                        fi
                        ;;
                    2)
                        pod_name=crucible-es-status-check-json-query-${SESSION_ID}-$(uuidgen)
                        status_check=$(${podman_run} --name ${pod_name} "${container_common_args[@]}" ${CRUCIBLE_CONTAINER_IMAGE} /bin/bash -c "${es_status_cmd} | jq -r '. \"status\"'")
                        if [ "${status_check}" == "yellow" -o "${status_check}" == "green" ]; then
                            echo "Elasticsearch is online after ${count} seconds"
                            es_available=1
                        else
                            sleep 1
                        fi
                        ;;
                esac
                (( count += 1 ))
            done
            if [ ${es_available} -eq 0 ]; then
                echo "ERROR: Elasticsearch failed to launch properly"
                RC=1
            else
                echo "Successfully started elasticsearch"
                RC=0
            fi
        fi
    fi
    return ${RC}
}

function stop_es() {
    local RC=0
    echo -n "Checking for elasticsearch"
    if podman_running crucible-es; then
        close_firewall_port 9200 tcp
        close_firewall_port 9300 tcp
        ${podman_stop} crucible-es > /dev/null
        RC=$?
        if [ ${RC} != 0 ]; then
            echo "ERROR: Could not stop elasticsearch"
        else
            echo "Successfully stopped elasticsearch"
        fi
    fi
    return ${RC}
}

function init_es() {
    local RC es_init_cmd
    es_init_cmd="${CRUCIBLE_HOME}/config/init-es.sh ${CRUCIBLE_HOME}/subprojects/core/CommonDataModel/templates"
    $podman_run --name crucible-init-es-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $es_init_cmd
    RC=$?
    if [ ${RC} != 0 ]; then
        echo "ERROR: Could not init elasticsearch"
    fi
    return ${RC}
}

function extract_run_id() {
    local RUN_DIR THIS_ID

    RUN_DIR=${1}
    shift

    if [ -e ${RUN_DIR} -a -d ${RUN_DIR} ]; then
        result_dumper=cat
        run_json="${RUN_DIR}/run/rickshaw-run.json"
        if [ ! -f $run_json ]; then
            result_dumper=xzcat
            run_json="${RUN_DIR}/run/rickshaw-run.json.xz"

            if [ ! -f $run_json ]; then
                echo "ERROR: Could not find a result json (ricksaw-run.json[.xz])"
                return 1
            fi
        fi

        THIS_ID=`$podman_run --name crucible-extract-run-id-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE /bin/bash -c "${result_dumper} ${run_json} | jq -r '. \"run-id\"'"`
        if [ -n "${THIS_ID}" -a "${THIS_ID}" != "null" ]; then
            echo "${THIS_ID}"
            return 0
        else
            THIS_ID=`$podman_run --name crucible-extract-run-id-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE /bin/bash -c "${result_dumper} ${run_json} | jq -r '. \"id\"'"`
            if [ -n "${THIS_ID}" -a "${THIS_ID}" != "null" ]; then
                echo "${THIS_ID}"
                return 0
            else
                echo "ERROR: Could not find run ID from rickshaw-result.json:, {.id} or {.run-id}"
                return 1
            fi
        fi
    else
        echo "ERROR: Could not find run directory at ${RUN_DIR}"
        return 1
    fi

    echo "ERROR: unknown error extracting run-id from ${RUN_DIR}"
    return 1
}

function extract_primary_periods() {
    local RUN_DIR
    local json_files
    local result_dumper
    local ITERATION_NUM
    local ITERATION_RC
    local SAMPLE_NUM
    local SAMPLE_RC
    local PRIMARY_PERIOD_ID
    local PRIMARY_PERIOD_RC
    local SAMPLE_RC
    local RC

    RUN_DIR=${1}
    shift

    if [ -e ${RUN_DIR} -a -d ${RUN_DIR} ]; then
        json_files=$(find -L "${RUN_DIR}" -name primary-period.json)
        if [ -n "${json_files}" ]; then
            result_dumper=cat
        else
            json_files=$(find -L "${RUN_DIR}" -name primary-period.json.xz)
            if [ -n "${json_files}" ]; then
                result_dumper=xzcat
            else
                echo "ERROR: Could not find a primary period json (primary-period.json[.xz])"
                return 1
            fi
        fi

        RC=0
        for json_file in ${json_files}; do
            SAMPLE_RC=0

            ITERATION_NUM=$(${podman_run} --name crucible-extract-primary-periods-iteration-num-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" ${CRUCIBLE_CONTAINER_IMAGE} /bin/bash -c "${result_dumper} ${json_file} | jq -r '. \"iteration\".\"num\"'")
            ITERATION_RC=$?

            if [ -z "${ITERATION_NUM}" -o ${ITERATION_RC} != 0 ]; then
                SAMPLE_RC=1
            else
                SAMPLE_NUM=$(${podman_run} --name crucible-extract-primary-periods-sample-num-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" ${CRUCIBLE_CONTAINER_IMAGE} /bin/bash -c "${result_dumper} ${json_file} | jq -r '. \"sample\".\"num\"'")
                SAMPLE_RC=$?

                if [ -z "${SAMPLE_NUM}" -o ${SAMPLE_RC} != 0 ]; then
                    SAMPLE_RC=1
                else
                    PRIMARY_PERIOD_ID=$(${podman_run} --name crucible-extract-primary-periods-id-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" ${CRUCIBLE_CONTAINER_IMAGE} /bin/bash -c "${result_dumper} ${json_file} | jq -r '. \"period\".\"id\"'")
                    PRIMARY_PERIOD_RC=$?

                    if [ -z "${PRIMARY_PERIOD_ID}" -o ${PRIMARY_PERIOD_RC} != 0 ]; then
                        SAMPLE_RC=1
                    fi
                fi
            fi

            if [ ${SAMPLE_RC} == 0 ]; then
                echo "${PRIMARY_PERIOD_ID}   Iteration: ${ITERATION_NUM}   Sample: ${SAMPLE_NUM}"
            else
                RC=1
                echo "ERROR: Failed to extract primary period from ${json_file}"
            fi
        done

        return ${RC}
    else
        echo "ERROR: Could not find run directory at ${RUN_DIR}"
        return 1
    fi
}

function post_process_run() {
    local rs_pp_b_cmd ps_pp_t_cmd
    local run_json this_id RUN_DIR
    local post_process_fail RC result_summary

    RUN_DIR=${1}
    echo "Benchmark result is in ${RUN_DIR}"
    shift

    rs_pp_b_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-post-process-bench\
      --base-run-dir=${RUN_DIR}"
    rs_pp_t_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-post-process-tools\
      --base-run-dir=${RUN_DIR}"

    post_process_fail=0
    $podman_run --name crucible-rickshaw-pp-bench-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_pp_b_cmd
    RC=$?
    if [ ${RC} != 0 ]; then
        echo "ERROR: Failed to post-process the benchmark [rc=${RC}]"
        post_process_fail=1
    fi
    $podman_run --name crucible-rickshaw-pp-tools-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_pp_t_cmd
    RC=$?
    if [ ${RC} != 0 ]; then
        echo "ERROR: Failed to post-process the tools [rc=${RC}]"
        post_process_fail=1
    fi
    if [ ${post_process_fail} == 1 ]; then
        return 1
    fi

    return ${RC}
}

function index_run() {
    local rs_index_cmd cdm_query_cmd
    local run_json this_id RUN_DIR
    local post_process_fail RC result_summary

    RUN_DIR=${1}
    echo "Benchmark result is in ${RUN_DIR}"
    shift

    rs_index_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-index\
      --base-run-dir=${RUN_DIR}"

    start_httpd
    RC=$?
    if [ ${RC} != 0 ]; then
        return ${RC}
    fi

    start_es
    RC=$?
    if [ ${RC} != 0 ]; then
        return ${RC}
    fi

    init_es
    if [ ${RC} != 0 ]; then
        return ${RC}
    fi

    $podman_run --name crucible-rickshaw-index-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_index_cmd
    RC=$?
    if [ ${RC} == 0 ]; then
        echo "Benchmark result now in elastic, localhost:9200"
        RC=$?
    else
        echo "ERROR: Could not index result into elasticsearch [rc=${RC}]"
    fi

    return ${RC}
}

function get_result_backend() {
    local RC

    cdm_query_cmd="${CRUCIBLE_HOME}/subprojects/core/CommonDataModel/queries/cdmq/get-result-summary.sh $@"
    $podman_run --name crucible-get-result-${SESSION_ID} "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $cdm_query_cmd
    RC=$?
    return ${RC}
}

function get_result_to_file() {
    local RC

    local output_file="$1/run/result-summary.txt"; shift

    echo "Generating benchmark summary report:"
    get_result_backend "$@" > ${output_file}
    RC=$?
    cat ${output_file}
    if [ ${RC} == 0 ]; then
        echo
        echo "Benchmark summary is complete and can be found in:"
        echo "${output_file}"
    else
        echo "ERROR: Could not generate benchmark summary"
        RC=1
    fi

    return ${RC}
}

function get_result() {
    local RC

    echo "Generating benchmark summary report:"
    get_result_backend "$@"
    RC=$?

    if [ ${RC} != 0 ]; then
        echo "ERROR: Could not generate benchmark summary"
        RC=1
    fi

    return ${RC}
}

function unarchive_run() {
    local ARCHIVE ARCHIVE_FILE TMP_ARCHIVE_FILE LINK_ARCHIVE RUN_NAME UNARCHIVE_CMD
    ARCHIVE=${1}

    if ! echo "${ARCHIVE}" | grep -q "^${var_archive_crucible}"; then
        ARCHIVE_FILE="${var_archive_crucible}/${ARCHIVE}"
    else
        ARCHIVE_FILE="${ARCHIVE}"
    fi

    if [ ! -e "${ARCHIVE_FILE}" ]; then
        echo "ERROR: The specified archive does not exit (${ARCHIVE_FILE})"
        return 1
    fi

    if [ -d "${ARCHIVE_FILE}" ]; then
        echo "ERROR: The specified archive is a directory which does not make sense (${ARCHIVE_FILE})"
        return 1
    fi

    TMP_ARCHIVE_FILE=$(readlink -e ${ARCHIVE_FILE})
    LINK_CLEANUP=""
    if [ "${TMP_ARCHIVE_FILE}" != "${ARCHIVE_FILE}" ]; then
        echo "The specified archive is a symbolic link (${ARCHIVE_FILE} -> ${TMP_ARCHIVE_FILE})"
        LINK_CLEANUP=${ARCHIVE_FILE}
        ARCHIVE_FILE=${TMP_ARCHIVE_FILE}
    fi

    ARCHIVE_NAME=$(basename ${ARCHIVE_FILE})
    BASE_DIR=$(dirname ${ARCHIVE_FILE})
    RUN_NAME=$(echo "${ARCHIVE_NAME}" | sed -e "s/\.tar\.xz//")

    if [ -e "${var_run_crucible}/${RUN_NAME}" ]; then
        echo "ERROR: There is already a run result at ${var_run_crucible}/${RUN_NAME}"
        return 1
    fi

    UNARCHIVE_CMD="unxz --threads=0 --stdout ${ARCHIVE_FILE} | tar --extract --directory=${var_run_crucible}"

    echo "Unpacking archive:"
    $podman_run --name crucible-unarchive-${SESSION_ID} "${container_common_args[@]}" ${CRUCIBLE_CONTAINER_IMAGE} /bin/bash -c "${UNARCHIVE_CMD}"
    if [ $? == 0 ]; then
        echo "${ARCHIVE_FILE} successfully unpacked to ${var_run_crucible}/${RUN_NAME}"

        echo "Removing archived data:"
        echo -e "\t${ARCHIVE_NAME}"
        rm ${ARCHIVE_FILE}
        if [ $? != 0 ]; then
            return 1
        fi

        if [ -n "${LINK_CLEANUP}" ]; then
            echo -e "\t${LINK_CLEANUP} (symbolic link)"
            rm ${LINK_CLEANUP}
            if [ $? != 0 ]; then
                return 1
            fi
        fi
    else
        echo "ERROR: Failed to unpack ${ARCHIVE_FILE} to ${var_run_crucible}/${RUN_NAME}"
        return 1
    fi

    return 0
}

function archive_run() {
    local RUN RUN_DIR TMP_RUN_DIR LINK_CLEANUP RUN_NAME ARCHIVE_NAME ARCHIVE_CMD
    RUN=${1}

    if ! echo "${RUN}" | grep -q "^${var_run_crucible}"; then
        RUN_DIR="${var_run_crucible}/${RUN}"
    else
        RUN_DIR="${RUN}"
    fi

    if [ ! -e "${RUN_DIR}" ]; then
        echo "ERROR: The specified run does not exist (${RUN_DIR})"
        return 1
    fi

    if [ ! -d "${RUN_DIR}" ]; then
        echo "ERROR: The specified run is not a directory as expected (${RUN_DIR})"
        return 1
    fi

    TMP_RUN_DIR=$(readlink -e ${RUN_DIR})
    LINK_CLEANUP=""
    if [ "${TMP_RUN_DIR}" != "${RUN_DIR}" ]; then
        echo "The specified run directory is a symbolic link (${RUN_DIR} -> ${TMP_RUN_DIR})"
        LINK_CLEANUP=${RUN_DIR}
        RUN_DIR=${TMP_RUN_DIR}
    fi

    RUN_NAME=$(basename ${RUN_DIR})
    BASE_DIR=$(dirname ${RUN_DIR})
    ARCHIVE_NAME="${RUN_NAME}.tar.xz"

    if [ -e "${var_archive_crucible}/${ARCHIVE_NAME}" ]; then
        echo "ERROR: There is already an archive at ${var_archive_crucible}/${ARCHIVE_NAME}"
        return 1
    fi

    ARCHIVE_CMD="pushd ${BASE_DIR} > /dev/null && tar --create ${RUN_NAME} | xz --threads=0 --stdout > ${var_archive_crucible}/${ARCHIVE_NAME}"

    echo "Creating archive:"
    $podman_run --name crucible-archive-${SESSION_ID} "${container_common_args[@]}" ${CRUCIBLE_CONTAINER_IMAGE} /bin/bash -c "${ARCHIVE_CMD}"
    if [ $? == 0 ]; then
        echo "${RUN_DIR} successfully archived to ${var_archive_crucible}/${ARCHIVE_NAME}"

        echo "Removing non-archived data:"

        echo -e "\t${RUN_DIR}"
        rm -Rf "${RUN_DIR}"
        if [ $? != 0 ]; then
            return 1
        fi

        if [ -n "${LINK_CLEANUP}" ]; then
           echo -e "\t${LINK_CLEANUP} (symbolic link)"
           rm ${LINK_CLEANUP}
           if [ $? != 0 ]; then
               return 1
           fi
        fi
    else
        echo "ERROR: Failed to archive ${RUN_DIR} to ${var_archive_crucible}/${ARCHIVE_NAME}"
        return 1
    fi

    return 0
}

function reinit_es() {
    local RC
    RC=0

    delete_es_cmd="${CRUCIBLE_HOME}/subprojects/core/CommonDataModel/templates/delete.sh"
    if ${podman_run} --name crucible-es-delete "${container_common_args[@]}" "${container_rs_args[@]}" ${CRUCIBLE_CONTAINER_IMAGE} ${delete_es_cmd}; then
        init_es
        RC=${?}
    else
        RC=${?}
    fi

    return ${RC}
}

function confirm_continue() {
    local ref
    local action_message
    local selection

    typeset -n ref=${1}
    shift
    action_message="${1}"
    shift

    read -p "Are you sure you want to ${action_message}? (Y/N) " selection
    selection=$(echo "${selection}" | tr '[:lower:]' '[:upper:]')
    case "${selection}" in
        "N")
            selection="NO"
            ;;
        "Y")
            selection="YES"
            ;;
    esac

    ref="${selection}"
}

function service_control() {
    local action
    local service
    local action_rc
    local service_rc
    local function_name

    function_name="service_control"

    action="${1}"
    shift

    case "${action}" in
        "start"|"stop")
            ;;
        *)
            echo "ERROR: ${function_name}: invalid action [${action}]"
            return 1
            ;;
    esac

    action_rc=0

    while [ $# -gt 0 ]; do
        service="${1}"
        shift

        case "${service}" in
            "httpd"|"es"|"redis")
                ${action}_${service}
                service_rc=$?
                ;;
            *)
                echo "ERROR: ${function_name}: unknown service [${service}]"
                service_rc=1
                ;;
        esac

        action_rc=$(( action_rc + service_rc ))
    done

    return ${action_rc}
}

function git_get_status() {
    git status --porcelain=2 --untracked-files=no --branch

    # returns
    # # branch.oid <commit> | (initial)        Current commit.
    # # branch.head <branch> | (detached)      Current branch.
    # # branch.upstream <upstream_branch>      If upstream is set.
    # # branch.ab +<ahead> -<behind>           If upstream is set and the commit is present.
    # <list of modified files>
    #
    # for example:
    # # branch.oid 315fb8994310011b6773af3010b2333aadef1ff5
    # # branch.head master
    # # branch.upstream origin/master
    # # branch.ab +0 -0
    # 1 .M N... 100755 100755 100755 c43e7fede957184824553c428d3dbeb3f91030f9 c43e7fede957184824553c428d3dbeb3f91030f9 bin/_update-git
    # 1 .M N... 100644 100644 100644 e7235f36dca770e60d40912986937bdaa57be9a2 e7235f36dca770e60d40912986937bdaa57be9a2 bin/base
    # 1 .M N... 100755 100755 100755 4543d7681d45bc8e21a7c6ebe363b271443f55b7 4543d7681d45bc8e21a7c6ebe363b271443f55b7 bin/crucible
    # 1 .M N... 100755 100755 100755 7975ea7d2d4b8fa0b5c2872a99f3572535ed9731 7975ea7d2d4b8fa0b5c2872a99f3572535ed9731 bin/repo
    # 1 .M N... 100755 100755 100755 5ce86d116566594258efb014c0d17efd172ad23d 5ce86d116566594258efb014c0d17efd172ad23d bin/update
}

# from output of git_get_status
function git_get_tracking() {
    echo "${1}" | grep "branch\.upstream" | awk '{ print $3 }'
}

# from output of git_get_status
function git_get_delta_behind() {
    echo "${1}" | grep "branch\.ab" | awk '{ print $4 }' | sed -e "s/^-//"
}

# from output of git_get_status
function git_get_tracked_entries() {
    echo "${1}" | grep -v "^#" | wc -l
}

# from output of git_get_status
function git_get_local_branch() {
    echo "${1}" | grep "branch\.head" | awk '{ print $3 }'
}

# from output git_get_tracking
function git_get_remote_name() {
    echo "${1}" | awk -F'/' '{ print $1 }'
}

# from output git_get_tracking
function git_get_remote_branch() {
    echo "${1}" | awk -F'/' '{ print $2 }'
}
