#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

GIT_TAG=$1

default_git_host_org="https://github.com/perftool-incubator"

function exit_error() {
    echo $1
    exit 1
}

# Check for dependencies
missing_bins=""
for bin in sed git; do
    $bin --version >/dev/null 2>&1 || missing_bins="$missing_bins $bin"
done
if [ ! -z "$missing_bins" ]; then
    exit_error "Could not find the following, please install and try again: $missing_bins"
fi

# Find the git repo base directory
crucible_repo_bin_dir=$(dirname `readlink -e $0`)
crucible_repo_dir=$(echo $crucible_repo_bin_dir | sed -e 'sX/binXX')
source ${crucible_repo_dir}/bin/jqlib

# The three sections below use sudo to install files and links as root.
# This script could be run by root (in which the sudo does not matter),
# or it could be run by a non-root user, in which you need sudo below.
# If you "sudo ./install" or use root, you will pick up /root/.crucible
# and not your user's .crucible, so don't do that unless you never use
# a non-root user to install crucible.
if [ `id -u` -eq 0 ]; then
    sudo_cmd=""
else
    sudo_cmd="sudo"
fi

# Create or update /etc/sysconfig/crucible
$sudo_cmd /bin/bash -c "if [ -e /etc/sysconfig/crucible ]; then echo Updating existing /etc/sysconfig/crucible; sed -i '/^CRUCIBLE_HOME=/d' /etc/sysconfig/crucible; fi"
$sudo_cmd /bin/bash -c "echo \"CRUCIBLE_HOME=$crucible_repo_dir\" >>/etc/sysconfig/crucible"
export CRUCIBLE_HOME="$crucible_repo_dir"

# Install the tab completions for crucible
if [ -d /etc/profile.d ]; then
    if [ -e "$crucible_repo_bin_dir/_crucible_completions" ]; then
        $sudo_cmd ln -sf "$crucible_repo_bin_dir/_crucible_completions" /etc/profile.d/crucible_completions.sh
        . "$crucible_repo_bin_dir/_crucible_completions"
    else
        exit_error "file $crucible_repo_bin_dir/_crucible_completions was not found, exiting"
    fi
fi
# Install the only bin we need for crucible in /usr/bin
if [ -e "$crucible_repo_bin_dir/crucible" ]; then
    $sudo_cmd ln -sf "$crucible_repo_bin_dir/crucible" /usr/bin/crucible
else
    exit_error "file $crucible_repo_bin_dir/crucible was not found, exiting"
fi

# Load the subprojects
REPOS_FILE=${crucible_repo_dir}/config/repos.json
declare -A subprojects
if [ -e "${REPOS_FILE}" ]; then
    for repo in $(jq -r '.official[], .unofficial[] | select(.name != "crucible") | .name' ${REPOS_FILE}); do
        subprojects["${repo}"]=1
    done
else
    exit_error "Could not locate the repos.json at ${REPOS_FILE}"
fi


no_clone=""
pushd "$crucible_repo_dir" >/dev/null || exit_error "Could not change directory to $crucible_repo_dir"
/bin/mkdir -p subprojects/benchmarks subprojects/tools subprojects/core subprojects/docs
for link in $(find subprojects -type l); do
    type_dir=$(echo "${link}" | awk -F'/' '{ print $2 }')
    name_link=$(echo "${link}" | awk -F'/' '{ print $3 }')
    active=0
    if [ -n "${subprojects[$name_link]}" ]; then
        sp_type=$(jq -r --arg name "${name_link}" '.official[], .unofficial[] | select(.name == $name) | .type' ${REPOS_FILE})
        case "$sp_type" in
            "benchmark")
                if [ "${type_dir}" == "benchmarks" ]; then
                    active=1
                fi
                ;;
            "tool")
                if [ "${type_dir}" == "tools" ]; then
                    active=1
                fi
                ;;
            "core")
                if [ "${type_dir}" == "core" ]; then
                    active=1
                fi
                ;;
            "doc")
                if [ "${type_dir}" == "docs" ]; then
                    active=1
                fi
                ;;
        esac
    fi
    if [ ${active} == 0 ]; then
        echo "Removing ${link} symbolic link because it is no longer an active subproject"
        rm -v ${link}
    fi
done
for subproject in "${!subprojects[@]}"; do
    sp_type=$(jq -r --arg name "${subproject}" '.official[], .unofficial[] | select(.name == $name) | .type' ${REPOS_FILE})
    sp_repository=$(jq -r --arg name "${subproject}" '.official[], .unofficial[] | select(.name == $name) | .repository' ${REPOS_FILE})
    # sp_repository has two possible formats:
    #   https://github.com/perftool-incubator/crucible.git
    #   git@github.com:perftool-incubator/crucible.git

    sp_git_proj=$(echo ${sp_repository} | awk -F/ '{print $NF}')
    sp_git_user_host_org=$(echo ${sp_repository} | sed -e s/${sp_git_proj}$// -e s,/$,,)

    sp_git_host_org=$(echo ${sp_git_user_host_org} | sed -e 'sXhttps://XX' -e 'sXhttp://XX' -e 's/.*@//')
    sp_git_user=$(echo ${sp_git_user_host_org} | sed -e s,${sp_git_host_org},, -e 'sX://X:X')
    sp_git_host_org=$(echo ${sp_git_host_org} | sed -e 's,/,:,g')

    sp_branch=$(jq -r --arg name "${subproject}" '.official[], .unofficial[] | select(.name == $name) | .checkout.target' ${REPOS_FILE})
    if [ -n "${GIT_TAG}" ]; then
        if [ "${sp_branch}" != "${GIT_TAG}" ]; then
            sp_branch=${GIT_TAG}
            jq_update ${REPOS_FILE} ${subproject}:checkout.target --arg subproject "${subproject}" --arg checkout_target "${sp_branch}" '.official[], .unofficial[] | select(.name == $subproject) |= (.checkout.target = $checkout_target)'
        fi

        current_checkout_mode=$(jq_query --arg subproject "${subproject}" '.official[], .unofficial[] | select(.name == $subproject) | .checkout.mode')
        if [ "${current_checkout_mode}" != "locked" ]; then
            jq_update ${REPOS_FILE} ${subproject}:checkout.mode --arg subproject "${subproject}" --arg checkout_mode "locked" '.official[], .unofficial[] | select(.name == $subproject) |= (.checkout.mode = $checkout_mode)'
        fi
    fi

    case "$sp_type" in
        "benchmark")
            sp_dir_prefix="benchmarks/"
            ;;
        "tool")
            sp_dir_prefix="tools/"
            ;;
        "core")
            sp_dir_prefix="core/"
            ;;
        "doc")
            sp_dir_prefix="docs/"
            ;;
    esac

    clone_user_host_org_dir="repos/${sp_git_user}${sp_git_host_org}"
    mkdir -p "${clone_user_host_org_dir}"
    clone_user_host_org_proj_dir="${clone_user_host_org_dir}/${sp_git_proj}"
    subproject_dir="subprojects/${sp_dir_prefix}${subproject}"

    if [ ! -e "${clone_user_host_org_proj_dir}" ]; then
        echo "Cloning ${subproject}"

        cmd="git clone ${sp_git_user_host_org}/${sp_git_proj} ${clone_user_host_org_proj_dir}"
        echo "${cmd}"
        if ! ${cmd}; then
            echo "failed to clone ${sp_git_user_host_org}/${sp_git_proj}"
            exit_error "Could not clone repo ${sp_git_proj}"
        fi
    else
        echo "Not cloning ${subproject} (it already exists)"
        no_clone+=" ${subproject}"
    fi

    if [ -e "${subproject_dir}" ]; then
        # delete an existing $subproject_dir so we can create a new one
        if ! /bin/rm -f "${subproject_dir}"; then
            exit_error "Could not rm ${subproject_dir}"
        fi
    fi

    # create the new $subproject_dir
    if ! /bin/ln -sf "../../${clone_user_host_org_proj_dir}" "${subproject_dir}"; then
        exit_error "Symlinking ${subproject_dir} to ../../${clone_user_host_org_proj_dir} failed"
    fi

    # make sure the correct branch/tag/commit is checked out
    if pushd "${clone_user_host_org_proj_dir}" >/dev/null; then
	cmd="git checkout ${sp_branch}"
	echo "${cmd}"
	if ! ${cmd}; then
	    exit_error "Could not checkout ${sp_branch} for ${sp_git_user_host_org}/${sp_git_proj}"
	fi
        popd >/dev/null
    else
        exit_error "Could not chdir to ${clone_user_host_org_proj_dir}"
    fi
done

if [ ! -z "${no_clone}" ]; then
    echo "Not cloning these subprojects as they already exist:"
    echo "${no_clone}"
fi

popd >/dev/null
