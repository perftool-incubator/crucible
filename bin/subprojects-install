#!/usr/bin/env bash
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-

function exit_error() {
    echo $1
    exit 1
}

# Check for dependencies
missing_bins=""
for bin in sed git; do
    $bin --version >/dev/null 2>&1 || missing_bins="$missing_bins $bin"
done
if [ ! -z "$missing_bins" ]; then
    exit_error "Could not find the following, please install and try again: $missing_bins"
fi

# Find the git repo base directory
crucible_repo_bin_dir=$(dirname `readlink -e $0`)
crucible_repo_dir=$(echo $crucible_repo_bin_dir | sed -e 'sX/binXX')

# The three sections below use sudo to install files and links as root.
# This script could be run by root (in which the sudo does not matter),
# or it could be run by a non-root user, in which you need sudo below.
# If you "sudo ./install" or use root, you will pick up /root/.crucible
# and not your user's .crucible, so don't do that unless you never use
# a non-root user to install crucible.
if [ `id -u` -eq 0 ]; then
    sudo_cmd=""
else
    sudo_cmd="sudo"
fi

# Create or update /etc/crucible.conf
$sudo_cmd /bin/bash -c "if [ -e /etc/crucible.conf ]; then echo Updating existing /etc/crucible.conf; sed -i '/^CRUCIBLE_HOME=/d' /etc/crucible.conf; fi"
$sudo_cmd /bin/bash -c "echo \"CRUCIBLE_HOME=$crucible_repo_dir\" >>/etc/crucible.conf"
export CRUCIBLE_HOME="$crucible_repo_dir"

# Install the tab completions for crucible
if [ -d /etc/profile.d ]; then
    if [ -e "$crucible_repo_bin_dir/_crucible_completions" ]; then
        $sudo_cmd ln -sf "$crucible_repo_bin_dir/_crucible_completions" /etc/profile.d/crucible_completions.sh
        . "$crucible_repo_bin_dir/_crucible_completions"
    else
        exit_error "file $crucible_repo_bin_dir/_crucible_completions was not found, exiting"
    fi
fi
# Install the only bin we need for crucible in /usr/bin
if [ -e "$crucible_repo_bin_dir/crucible" ]; then
    $sudo_cmd ln -sf "$crucible_repo_bin_dir/crucible" /usr/bin/crucible
else
    exit_error "file $crucible_repo_bin_dir/crucible was not found, exiting"
fi

# Load the subprojects from ./config/default_subprojects, then from $HOME/.crucible/subprojects to get local overrides
declare -A subprojects
for conf_file in "$crucible_repo_dir/config/default_subprojects" "$HOME/.crucible/subprojects"; do
    if [ -e "$conf_file" ]; then
        while read line; do
            if echo $line | grep -q "^\#"; then
                continue
            fi
            name=`echo $line | awk '{print $1}'`
            subprojects["$name"]="$line"
        done < "$conf_file"
    fi
done

no_clone=""
pushd "$crucible_repo_dir" >/dev/null || exit_error "Could not change directory to $crucible_repo_dir"
/bin/mkdir -p subprojects/benchmarks subprojects/tools subprojects/core
for subproject in "${!subprojects[@]}"; do
    sp_type=`echo ${subprojects[$subproject]} | awk '{print $2}'`
    sp_git_user_host_org_proj=`echo ${subprojects[$subproject]} | awk '{print $3}'`
    # sp_git_user_host_org_proj has two possible formats:
    #   https://github.com/perftool-incubator/crucible.git
    #   git@github.com:perftool-incubator/crucible.git
    sp_git_proj=`echo $sp_git_user_host_org_proj | awk -F/ '{print $NF}'`
    sp_git_user_host_org=`echo $sp_git_user_host_org_proj | sed -e s/$sp_git_proj$// -e s,/$,,`
    # If the repo location was omitted, get this from existing crucible repo
    if [ -z "$sp_git_user_host_org" ]; then
        pushd $crucible_repo_dir >/dev/null
        cru_git_user_host_org_proj=`git remote -v | grep origin | grep fetch | head -1 | awk '{print $2}'`
        cru_git_proj=`echo $cru_git_user_host_org_proj | awk -F/ '{print $NF}'`
            sp_git_user_host_org=`echo $cru_git_user_host_org_proj | sed -e s/$cru_git_proj$// -e s,/$,,`
            popd >/dev/null
    fi
    sp_git_host_org=`echo $sp_git_user_host_org | sed -e 'sXhttps://XX' -e 'sXhttp://XX' -e 's/.*@//'`
    sp_git_user=`echo $sp_git_user_host_org | sed -e s,$sp_git_host_org,, -e 'sX://X:X'`
    sp_git_host_org=`echo $sp_git_host_org | sed -e 's,/,:,g'`
    sp_branch=`echo ${subprojects[$subproject]} | awk '{print $4}'`
    case "$sp_type" in
        "benchmark")
            sp_dir_prefix="benchmarks/"
            ;;
        "tool")
            sp_dir_prefix="tools/"
            ;;
        "core")
            sp_dir_prefix="core/"
            ;;
    esac
    clone_user_host_org_dir="repos/$sp_git_user$sp_git_host_org"
    mkdir -p "$clone_user_host_org_dir"
    clone_user_host_org_proj_dir="$clone_user_host_org_dir/$sp_git_proj"
    subproject_dir="subprojects/$sp_dir_prefix$subproject"
    if [ ! -e "$clone_user_host_org_proj_dir" ]; then
        echo git clone $sp_git_user_host_org/$sp_git_proj "$clone_user_host_org_proj_dir"
        git clone $sp_git_user_host_org/$sp_git_proj "$clone_user_host_org_proj_dir" || \
            exit_error "Could not clone repo $sp_git_user_host_org_proj"
    else
        no_clone="$no_clone $subproject"
    fi
    pushd "$clone_user_host_org_proj_dir" >/dev/null || exit_error "Could not chdir to $clone_user_host_org_proj_dir"
    git checkout $sp_branch >/dev/null 2>&1 || exit_error "Could not checkout $sp_branch for $sp_git_user_host_org/$sp_git_proj"
    popd >/dev/null
    /bin/rm -f "$subproject_dir" || exit_error "Could not rm $subproject_dir"
    /bin/ln -sf "../../$clone_user_host_org_proj_dir" "$subproject_dir" || \
        exit_error "Symlinking $subproject_dir to ../../$clone_user_host_org_proj_dir failed"
done
if [ ! -z "$no_clone" ]; then
    echo "Not cloning these subprojects as they already exist:"
    echo "$no_clone"
fi
popd >/dev/null

