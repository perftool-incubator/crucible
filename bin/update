#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

# repo updating infrastructure

. /etc/sysconfig/crucible

if [ -z "$CRUCIBLE_HOME" ]; then
    echo "CRUCIBLE_HOME not defined, exiting."
    exit 1
fi

if [ ! -e $CRUCIBLE_HOME ]; then
    echo "Could not find $CRUCIBLE_HOME, exiting."
    exit 1
fi

. $CRUCIBLE_HOME/bin/base

help_column_width=25

function help() {
    echo "Usage:"
    echo "  update <target>"
    echo
    echo "The following targets are supported:"
    echo
    printf "%-${help_column_width}s | Update all repositories (default)\n" "all"
    printf "%-${help_column_width}s | Update the main crucible repository\n" "crucible"
    printf "%-${help_column_width}s | Update the controller container image\n" "controller-image"
    echo
    if pushd $CRUCIBLE_HOME/subprojects > /dev/null; then
        for repo in $(find . -type l | sed 'sX./XX'); do
            printf "%-${help_column_width}s | Update the %s repository\n" "${repo}" "${repo}"
        done
        popd > /dev/null
    fi
    echo
}

if [ "$1" == "help" ]; then
    help
    exit
elif [ -z "$1" ]; then
    repo="all"
else
    repo="$1"
fi

case "${repo}" in
    "all"|"__all"|"crucible"|"__crucible")
        case "${repo}" in
            "all"|"crucible")
                echo "Crucible update pass 1:"
                ;;
            "__all"|"__crucible")
                echo
                echo "Crucible update pass 2:"
                ;;
        esac
        echo

        # the first and second time this script is called for the
        # "all" or "crucible" targets a special case is invoked to
        # ensure that updates can be done to the crucible repository
        # in a manner which does not break the update process

        pushd $CRUCIBLE_HOME > /dev/null

        # create and execute a temporary script so that changes to the
        # "real" script do not break the updating process while it is
        # running -- ie. handle bash does not behave when the script
        # is changed while it is running
        TMP_SCRIPT=$(mktemp)
        cp -a $CRUCIBLE_HOME/bin/_update-git ${TMP_SCRIPT}
        echo "rm ${TMP_SCRIPT}" >> ${TMP_SCRIPT}
        echo "exec ${CRUCIBLE_HOME}/bin/update __${repo}" >> ${TMP_SCRIPT}

        exec ${TMP_SCRIPT}
        ;;
esac

# beyond this point the script behaves "normally", meaning that it
# does not have to create a copy of itself anymore and exec that copy

case "${repo}" in
    "____all"|"____crucible")
        # any crucible specific post update logic goes here
        ;;
esac

case "${repo}" in
    "____all"|"____crucible"|"controller-image")
        echo
        echo "Controller update:"
        echo
        echo "Shutting down existing controller pods:"
        if ${podman_exists} crucible-es; then
            ${podman_stop} crucible-es
        else
            echo "crucible-es is not running"
        fi
        if ${podman_exists} crucible-httpd; then
            ${podman_stop} crucible-httpd
        else
            echo "crucible-httpd is not running"
        fi
        if ${podman_exists} crucible-redis; then
            ${podman_stop} crucible-redis
        else
            echo "crucible-redis is not running"
        fi
        echo
        echo "Checking for new controller image:"
        echo
        if ! ${podman_pull} ${CRUCIBLE_CONTAINER_IMAGE}; then
            exit 1
        fi
        ;;
    *)
        echo
        echo "Updating ${repo}:"
        echo

        if pushd $CRUCIBLE_HOME/subprojects/${repo} > /dev/null; then
            if ! $CRUCIBLE_HOME/bin/_update-git; then
                exit 1
            fi
            popd > /dev/null
            exit
        else
            echo "Invalid repo '${repo}'."
            exit 1
        fi
        ;;
esac

if [ "${repo}" == "____all" ]; then
    if pushd $CRUCIBLE_HOME/subprojects > /dev/null; then
        for tmp_repo in $(find . -type l | sed 'sX./XX'); do
            if pushd ${tmp_repo} > /dev/null; then
                echo
                echo "Updating ${tmp_repo}:"
                echo

                if ! $CRUCIBLE_HOME/bin/_update-git; then
                    exit 1
                fi

                popd > /dev/null
            fi
        done
        popd > /dev/null
    fi
fi

case "${repo}" in
    "____all"|"____crucible")
        # install any new subprojects; do this after the updating
        # process so we don't clone and then immediately try to update
        # the repo which would just hammer the repo site
        echo
        echo "Checking for and installing any new subprojects:"
        echo

        if ! ${CRUCIBLE_HOME}/bin/subprojects-install; then
            exit 1
        fi
        ;;
esac

exit 0
